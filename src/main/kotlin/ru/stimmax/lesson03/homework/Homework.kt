package ru.stimmax.lesson03.homework


//1. Название мероприятия, неизменяемая, публичная информация
val nameOfHackaton: String = "Wild Hackaton"

//2. Дата проведения, может меняться, публичная информация
var date: String = "10 Nov 2025"

//3. Место проведения, может меняться, публичная информация
var name: String = "Town, 221B Sample st."

//4. Бюджет мероприятия (я бы сделала что-то типа массива/объекта, но оставлю как в примере), неизменяемая, публичная информация, можно загрузить по необходимости
private val budget: String  by lazy {
    "Information about budget"
}

//5. Количество участников, может меняться, публичная информация. Добавлен сеттер просто для примера, т.к. может принимать только положительное значение
var numberOfParticipants: Int = 0
    set(value) {
        if (value >= 0) field = value
    }

//6. Длительность хакатона, спорно на тему изменяемости, но пусть будет неизменяемой, публичной информацией
val duration: Double = 7.5

//7. Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг, неизменяемая (спорно), приватная информация, которую можно вызвать при необходимости.
private val supportContacts: String by lazy {
    "Contact suppliers information"
}

//8. Текущее состояние хакатона (статус), публичная изменяемая информация, которую мы получим в процессе, реализуем как String, можно и логический тип, но состояний может быть больше 2-ух.
lateinit var status: String

//9. Список спонсоров, неизменяемая, публичная информация
val sponsors: String ="Sponsors list"

//10. Бюджет мероприятия - в этот раз цифры, неизменяемые и непубличные.
private val budgetSum: Int = 100000

//11. Текущий уровень доступа к интернету - состояний может быть больше двух, поэтому реализуем как цифру, и сделаем непубличной информацию, получаем в процессе
private lateinit var internetStatus: String //сменила Int на String из-за ошибки с lateinit

//12. Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки, приватная изменяемая информация
private var supportCoordinate = "Coordinate information"

//13. Количество команд, неизменяемая, публичная информация
val numberOfCommands: Int = 4

//14. Перечень задач, неизменяемая, публичная информация, вызываем по необходимости
val listOfTasks: String by lazy {
    "List of tasks"
}


//15. План эвакуации, неизменяемая, публичная информация, можно сделать константой - здание никак не изменится
const val evacMap = "Plan of evacuation"

//16. Список доступного оборудования (всё, что выделено для использования на мероприятии) - неизменяемая, публичная информация
val equipmentAll: String ="Equipment list"

//17. Список свободного оборудования (всё, что можно взять прямо сейчас и что не занято другими участниками) - информация получается в моменте, публичная, изменяемая
lateinit var equipmentAvailable: String

//18 График питания участников (зависит от поставщика питания, определяемого за неделю до начала) - информация получается в моменте, публичная, изменяемая
lateinit var mealShedule: String

//19. План мероприятий на случай сбоев - неизменяемая, публичная информация, загружаемая по необходимости
val failturePlan: String by lazy {
 "Disaster Management Plan"
}

//20. Список экспертов и жюри - публичная неизменяемая информация
val juryList: String = "Jury list"

//21. Политика конфиденциальности - публичная константа
const val privatePolicy = "Private Policy"

//22. Приватные отзывы (фидбэк) участников и зрителей для анализа проблем - информация получается в моменте, непубличная
private lateinit var feedbackPrivate: String

//23. Текущая температура в помещении - информация получается в моменте, публичная
lateinit var envTemperature: String //сменила Int на String из-за ошибки с lateinit

//24. Данные мониторинга и анализ производительности для целей отладки своих приложений командами, информация получается в моменте, публичная
lateinit var performAnalysis: String

//25. Регулятор скорости интернета (понижающий коэффициент, например 0.5) - непубличная неизменяемая информация
private val speedFactor: Double = 0.5

//26. Уровень освещения - информация получается в моменте, публичная
lateinit var envLight: String

//27. Лог событий мероприятия - информация получается в моменте, непубличная
private lateinit var log: String

//28. Возможность получения медицинской помощи прямо на мероприятии (да/нет) - логический тип, неизменяемый, публичный
val medAvailable: Boolean = true

//29. Планы и процедуры для обеспечения безопасности мероприятия, включая планы эвакуации и протоколы чрезвычайных ситуаций, неизменяемая, публичная информация, загружаем по запросу
val safetyPlan: String by lazy {
    "Plan and procedures of evacuation and safety"
}

//30. Регистрационный номер мероприятия - неизменяемая, публичная информация
val regNumber: String = "G33425D"

//31. Максимально допустимый уровень шума в помещении хакатона. - неизменяемая, публичная информация
val noiseLimit: Int = 15

//32. Индикатор превышения уровня шума в помещениях (превышен или не превышен в данный момент) - информация получается в моменте, публичная, логический тип
lateinit var noiseLimitOver: String //сменила Boolean на String из-за ошибки с lateinit

//33. План взаимодействия с прессой - неизменяемая, непубличная информация
private val pressPlan: String = "Press Plan"

//34. Детальная публичная информация о проектах каждой команды, сбор данных включает в себя компиляцию кода и сбор статистики прогона автоматизированных проверок - информация получается в моменте, публичная
lateinit var commandsProjects: String

//35. Статус получения всех необходимых разрешений для проведения мероприятия - информация получается в моменте, непубличная
private lateinit var permissionsStatus: String

//36. Индикатор доступности специализированного оборудования в данный момент (например, специальному оборудованию) - логический тип, информация изменяемая, публичная (спорно, но оставлю так)
var accessibilityStatus: Boolean = true

//37. Список партнеров мероприятия - неизменяемая, публичная
val partnersList: String = "List of partners"

//38. Отчет, включающий фотографии, видео и отзывы, генерируется и становится доступен после завершения мероприятия. - непубличная, получаемая в моменте информация
private lateinit var reportGather: String

//38. Внутренние правила распределения призов - неизменяемая публичная информация, загружаемая по необходимости
val prizeRules: String by lazy {
    "Prizes distribution rules"
}

//39. Список разыгрываемых призов - неизменяемая публичная информация
val prizeList: String = "List of prizes"

//40. Контактная информация экстренных служб, медицинского персонала и других важных служб, для внутреннего пользования. - неизменяемая непубличная информация, загружаемая по необходимости
private val emergencyContacts: String by lazy {
    "Emergency Contacts"
}

//41. Особые условия для участников с ограниченными возможностями - неизменяемая, публичная информация, загружаемая по необходимости
val specialCondRules: String by lazy {
    "Special conditions for participants with disabilities"
}

//42. Общее настроение участников (определяется опросами) - непубличная, получаемая в моменте информация
//тут можно добавить простенький цикл по получению цифры от опроса и нахождению среднего числа
private var averageMood: Double = 0.0
    set(value) {
        if (value >= 0) field = value
    }


//43. Подробный план хакатона, включающий время и содержание каждого сегмента, инициализируется непосредственно перед началом мероприятия - непубличная, получаемая в моменте информация
private lateinit var fullPlanActual: String

//44. Имя знаменитого специального гостя, которое будет объявлено за день до мероприятия, но в момент инициализации неизвестно. - публичная, получаемая в моменте информация
lateinit var specialGuest: String

//45. Максимальное количество людей, которое может вместить место проведения. - непубличная неизменяемая информация
private val maxGuests: Int = 40

//46. Количество часов, отведенное каждой команде для работы над проектом. - публичная неизменяемая информация
val maxProjectTime: Int = 6